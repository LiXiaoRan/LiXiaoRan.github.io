<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>《剑指 offer》 孩子们的游戏（圆圈中最后剩下的数）</title>
      <link href="/2019/12/29/jianzhi-offer-06/"/>
      <url>/2019/12/29/jianzhi-offer-06/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>每年六一儿童节,牛客都会准备一些小礼物去看望孤儿院的小朋友,今年亦是如此。HF作为牛客的资深元老,自然也准备了一些小游戏。其中,有个游戏是这样的:首先,让小朋友们围成一个大圈。然后,他随机指定一个数m,让编号为0的小朋友开始报数。每次喊到m-1的那个小朋友要出列唱首歌,然后可以在礼品箱中任意的挑选礼物,并且不再回到圈中,从他的下一个小朋友开始,继续0…m-1报数….这样下去….直到剩下最后一个小朋友,可以不用表演,并且拿到牛客名贵的“名侦探柯南”典藏版(名额有限哦!!^_^)。请你试着想下,哪个小朋友会得到这份礼品呢？(注：小朋友的编号是从0到n-1)</p><p>如果没有小朋友，请返回-1</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题不要过于思考，最简单的办法就是使用数组去模拟循环，设置三个变量分别表示当前是第几个小朋友（数组下标），当前走到了哪里，还在环中的人数。然后在循环中模拟即可。见代码。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LastRemaining_Solution</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">let</span> kids<span class="token operator">=</span><span class="token punctuation">[</span><span class="token operator">...</span><span class="token function">Array</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> count <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>count<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">>=</span>n<span class="token punctuation">)</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//模拟环。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>kids<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//跳过被删除的对象。</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>step<span class="token operator">==</span>m<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token comment" spellcheck="true">//找到待删除的对象。</span>                kids<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>                step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                count<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                   step<span class="token operator">++</span><span class="token punctuation">;</span>                     <span class="token comment" spellcheck="true">//记录已走过的。 </span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> i<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 剑指 offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> 链表 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指 offer》 扑克牌顺子</title>
      <link href="/2019/12/29/jianzhi-offer-05/"/>
      <url>/2019/12/29/jianzhi-offer-05/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>LL今天心情特别好,因为他去买了一副扑克牌,发现里面居然有2个大王,2个小王(一副牌原本是54张^_^)…他随机从中抽出了5张牌,想测测自己的手气,看看能不能抽到顺子,如果抽到的话,他决定去买体育彩票,嘿嘿！！“红心A,黑桃3,小王,大王,方片5”,“Oh My God!”不是顺子…..LL不高兴了,他想了想,决定大\小 王可以看成任何数字,并且A看作1,J为11,Q为12,K为13。上面的5张牌就可以变成“1,2,3,4,5”(大小王分别看作2和4),“So Lucky!”。LL决定去买体育彩票啦。 现在,要求你使用这幅牌模拟上面的过程,然后告诉我们LL的运气如何， 如果牌能组成顺子就输出true，否则就输出false。为了方便起见,你可以认为大小王是0。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这道题的思路很简单，0可以作为任意数字，那么我们有以下几种情况。</p><ul><li>不是顺子的情况</li></ul><ol><li>如果出现对子，则肯定不是顺子</li><li>如果数组为空，肯定不是顺子</li></ol><ul><li>是顺子的情况</li></ul><ol><li><p>排序后相邻数字间隔总数<code>（间隔为1的记0）</code>等于0的个数，那就说明是顺子。</p></li><li><p>还有一种情况就是没有0，原本就是顺子，上面的判断条件依然起效，无须再过多判断。</p><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3></li><li><p>判断是否为空</p></li><li><p>排序</p></li><li><p>计算0的个数</p></li><li><p>计算所有相邻数字的间隔总数</p></li><li><p>如果<code>3&gt;=4</code>那就是顺子</p></li><li><p>如果出现对子，则不是顺子<br>具体见下方代码</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">IsContinuous</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token comment" spellcheck="true">// write code here</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> numbers<span class="token operator">=</span>numbers<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">let</span> numberZero<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//0的个数</span> <span class="token keyword">let</span> gapNum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//间隔总数</span> <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>numbers<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//统计王的个数</span>         numberZero<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token keyword">continue</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>numbers<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>         <span class="token comment" spellcheck="true">//出现对子</span>         <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>     gapNum<span class="token operator">+</span><span class="token operator">=</span>numbers<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//间隔等于1则不计算</span> <span class="token punctuation">}</span> <span class="token keyword">if</span><span class="token punctuation">(</span>numberZero<span class="token operator">>=</span>gapNum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p>}<br>```</p>]]></content>
      
      
      <categories>
          
          <category> 剑指 offer </category>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指 offer》 左旋转字符串</title>
      <link href="/2019/12/22/jianzhi-offer-04/"/>
      <url>/2019/12/22/jianzhi-offer-04/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>汇编语言中有一种移位指令叫做循环左移（ROL），现在有个简单的任务，就是用字符串模拟这个指令的运算结果。对于一个给定的字符序列S，请你把其循环左移K位后的序列输出。例如，字符序列S=”abcXYZdef”,要求输出循环左移3位后的结果，即“XYZdefabc”。是不是很简单？OK，搞定它！</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>原理：$YX = (X^TY^T)^T$<br>1.先翻转前半部分<br>2.再翻转后半部分<br>3.再对字符串整个进行翻转</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">LeftRotateString</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>str<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>str<span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">let</span> len<span class="token operator">=</span>str<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    n<span class="token operator">=</span>n<span class="token operator">%</span>len<span class="token punctuation">;</span>    str<span class="token operator">=</span><span class="token function">reverseStr</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">=</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">reverseStr</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    str<span class="token operator">=</span><span class="token function">reverseStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> str<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> str<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指 offer </category>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指 offer》 和为s的正整数序列</title>
      <link href="/2019/12/22/jianzhi-offer03/"/>
      <url>/2019/12/22/jianzhi-offer03/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>小明很喜欢数学,有一天他在做数学作业时,要求计算出9~16的和,他马上就写出了正确答案是100。但是他并不满足于此,他在想究竟有多少种连续的正数序列的和为100(至少包括两个数)。没多久,他就得到另一组连续正数和为100的序列:18,19,20,21,22。现在把问题交给你,你能不能也很快的找出所有和为S的连续正数序列? Good Luck!</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述"></a>输出描述</h2><p>输出所有和为S的连续正数序列。序列内按照从小至大的顺序，序列间按照开始数字从小到大的顺序</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>双指针技术，就是相当于有一个窗口，窗口的左右两边就是两个指针，我们根据窗口内值之和来确定窗口的位置和宽度。非常牛逼的思路，虽然双指针或者所谓的滑动窗口技巧还是蛮常见的，但是这一题还真想不到这个思路。<br>两个窗口都是从左边出发，不是两边夹逼。另外，当小于目标数时high++；大于目标数时low++，如果是high–，那么你仔细想想，你的窗口还怎么往后移动，整个结果在第一次大于目标数之后就不会往后移动，相反，而是在在这个low和high之间夹逼试探，最终啥都找不到或者只能找到一个。</p><h3 id="具体做法"><a href="#具体做法" class="headerlink" title="具体做法"></a>具体做法</h3><p>（1）两个起点，相当于动态窗口的两边，根据其窗口内的值的和来确定窗口的位置和大小<br>（2）相等，那么就将窗口范围的所有数添加进结果集<br>（3）如果当前窗口内的值之和小于sum，那么窗口右侧边界右移一下<br>（4）如果当前窗口内的值之和大于sum，那么窗口左侧边界右移一下<br>判定是否循环条件是窗口的左侧小于右侧。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FindContinuousSequence</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">let</span> result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//存储结果</span>    <span class="token keyword">let</span> low<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>heigh<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>low<span class="token operator">&lt;</span>heigh<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//由于是连续的，差为1的一个序列，那么求和公式是(a0+an)*n/2</span>        <span class="token keyword">let</span> currSum<span class="token operator">=</span><span class="token punctuation">(</span>low<span class="token operator">+</span>heigh<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>heigh<span class="token operator">-</span>low<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>currSum<span class="token operator">==</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">let</span> tempRes<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i<span class="token operator">=</span>low<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>heigh<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                tempRes<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            result<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tempRes<span class="token punctuation">)</span><span class="token punctuation">;</span>            low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>currSum<span class="token operator">&lt;</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>            heigh<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            low<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 剑指 offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> 穷举 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指 offer》 和为s的两个数字</title>
      <link href="/2019/12/21/jianzhi-offer2/"/>
      <url>/2019/12/21/jianzhi-offer2/</url>
      
        <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>输入一个递增排序的数组和一个数字S，在数组中查找两个数，使得他们的和正好是S，如果有多对数字的和等于S，输出两个数的乘积最小的。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>对应每个测试案例，输出两个数，小的先输出。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>数列满足递增，设两个头尾两个指针i和j，<br>若ai + aj == sum，就是答案（相差越远乘积越小）<br>若ai + aj &gt; sum，aj肯定不是答案之一（前面已得出 i 前面的数已是不可能），j -= 1<br>若ai + aj &lt; sum，ai肯定不是答案之一（前面已得出 j 后面的数已是不可能），i += 1<br>O(n)</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">FindNumbersWithSum</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> sum<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// write code here</span>    <span class="token keyword">let</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> j<span class="token operator">=</span>array<span class="token punctuation">.</span>length<span class="token number">-1</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> res<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">let</span> temp<span class="token operator">=</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>temp<span class="token operator">==</span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>            res<span class="token operator">=</span><span class="token punctuation">[</span>array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>array<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>j<span class="token operator">&amp;&amp;</span>temp<span class="token operator">></span>sum<span class="token punctuation">)</span><span class="token punctuation">{</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 剑指 offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>这个博客是怎么来的</title>
      <link href="/2019/12/14/hello-world/"/>
      <url>/2019/12/14/hello-world/</url>
      
        <content type="html"><![CDATA[<h1 id="这个博客是怎么来的"><a href="#这个博客是怎么来的" class="headerlink" title="这个博客是怎么来的"></a>这个博客是怎么来的</h1><p>效果预览：</p><p><img src="https://raw.githubusercontent.com/LiXiaoRan/PicGoBed/master/img/20191214172126.png" alt></p><h2 id="做法"><a href="#做法" class="headerlink" title="做法"></a>做法</h2><p>根据参考文献中的内容，我配置了环境</p><p>首先是安装Hexo</p><p>在合适的地方新建一个文件夹，用来存放自己的博客文件，比如我的博客文件都存放在<code>D:\study\program\blog</code>目录下。</p><p>在该目录下右键点击<code>Git Bash Here</code>，打开git的控制台窗口，以后我们所有的操作都在git控制台进行，就不要用Windows自带的控制台了。</p><p>定位到该目录下，输入<code>npm i hexo-cli -g</code>安装Hexo。会有几个报错，无视它就行。</p><p>安装完后输入<code>hexo -v</code>验证是否安装成功。</p><p>然后就要初始化我们的网站，输入<code>hexo init</code>初始化文件夹，接着输入<code>npm install</code>安装必备的组件。</p><p>这样本地的网站配置也弄好啦，输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>打开本地服务器，然后浏览器打开<a href="http://localhost:4000/，就可以看到我们的博客啦，效果如下：" target="_blank" rel="noopener">http://localhost:4000/，就可以看到我们的博客啦，效果如下：</a></p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/5.jpg" alt="img"></p><p>然后第二步就比较关键了：</p><p>打开<a href="https://github.com/，新建一个项目，然后如下图所示，输入自己的项目名字，后面一定要加`.github.io`后缀，README初始化也要勾上。**名称一定要和你的github名字完全一样，比如你github名字叫`abc`，那么仓库名字一定要是`abc.github.io`。" target="_blank" rel="noopener">https://github.com/，新建一个项目，然后如下图所示，输入自己的项目名字，后面一定要加`.github.io`后缀，README初始化也要勾上。**名称一定要和你的github名字完全一样，比如你github名字叫`abc`，那么仓库名字一定要是`abc.github.io`。</a>**</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/2.jpg" alt="img"></p><p>然后项目就建成了，点击<code>Settings</code>，向下拉到最后有个<code>GitHub Pages</code>，点击<code>Choose a theme</code>选择一个主题。然后等一会儿，再回到<code>GitHub Pages</code>，就可以看到咱们的博客链接了。点击链接，就会出现自己的网页，效果如下：</p><p><img src="https://godweiyang.com/2018/04/13/hexo-blog/4.jpg" alt="img"></p><hr><p>以上只是环境，有了环境后，就可以随心配置了。</p><p>这里我下载了<a href="https://github.com/godweiyang/hexo-matery-modified" target="_blank" rel="noopener">https://github.com/godweiyang/hexo-matery-modified</a> 的源码，然后直接修改。</p><p>下载后首先要解压<code>node_modules</code>,然后运行<code>npm install</code>接下来:</p><ul><li><p>根目录配置文件<code>_config.yml</code>和主题目录配置文件<code>_config.yml</code>中修改个人信息。</p></li><li><p>根目录配置文件中修改<code>deploy</code>一栏的<code>repository</code>。</p></li><li><p>根目录配置文件中修改<code>baidu_url_submit</code>一栏的<code>token</code>。</p></li><li><p>主题配置文件中修改<code>gitalk</code>一栏，修改方法见下文。</p></li></ul><pre class="line-numbers language-shell"><code class="language-shell">hexo g  # 生成博客网页文件hexo s  # 本地预览博客hexo d  # 上传网页文件到github<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果样式没有发生变化，就在这三步操作之前先运行一下</p><pre class="line-numbers language-sh"><code class="language-sh">hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="配置gitalk"><a href="#配置gitalk" class="headerlink" title="配置gitalk"></a>配置gitalk</h4><p>首先打开<a href="https://github.com/settings/applications/new" target="_blank" rel="noopener">github</a>申请一个应用，要填四个东西：</p><pre class="line-numbers language-sh"><code class="language-sh">Application name //应用名称，随便填 Homepage URL //填自己的博客地址 Application description //应用描述，随便填 Authorization callback URL <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后点击注册，会出现两个字符串<code>Client ID</code>和<code>Client Secret</code>，这个要复制出来。</p><p>然后去主题的配置文件<code>_config.yml</code>下修改<code>gitalk</code>那里：</p><pre class="line-numbers language-sh"><code class="language-sh">gitalk:         enable: true         owner: 你的github用户名         repo: 你的github用户名.github.io         oauth:                 clientId: 粘贴刚刚注册完显示的字符串                 clientSecret: 粘贴刚刚注册完显示的字符串         admin: 你的github用户名<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以后写文章的时候，只要在文章页面登陆过github，就会自动创建评论框，<strong>记得每次写完文章后打开博客文章页面一下</strong>。</p><h2 id="写文章和发布文章"><a href="#写文章和发布文章" class="headerlink" title="写文章和发布文章"></a>写文章和发布文章</h2><p>首先在博客根目录下右键打开git bash，安装一个扩展<code>npm i hexo-deployer-git</code>。</p><p>然后输入<code>hexo new post &quot;article title&quot;</code>，新建一篇文章。</p><p>然后打开<code>D:\study\program\blog\source\_posts</code>的目录，可以发现下面多了一个文件夹和一个<code>.md</code>文件，一个用来存放你的图片等数据，另一个就是你的文章文件啦。</p><p>编写完markdown文件后，根目录下输入<code>hexo g</code>生成静态网页，然后输入<code>hexo s</code>可以本地预览效果，最后输入<code>hexo d</code>上传到github上。这时打开你的github.io主页就能看到发布的文章啦。</p><h5 id="还有一些新文章的标题配置如下图所示："><a href="#还有一些新文章的标题配置如下图所示：" class="headerlink" title="还有一些新文章的标题配置如下图所示："></a>还有一些新文章的标题配置如下图所示：</h5><p><img src="https://raw.githubusercontent.com/LiXiaoRan/PicGoBed/master/img/20191214174513.png" alt></p><p>完。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul><li><a href="https://godweiyang.com/2018/04/13/hexo-blog/" target="_blank" rel="noopener">https://godweiyang.com/2018/04/13/hexo-blog/</a></li><li>超详细Hexo+Github博客搭建小白教程 - godweiyang的文章 - 知乎  <a href="https://zhuanlan.zhihu.com/p/35668237" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/35668237</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《剑指 offer》 跳台阶</title>
      <link href="/2019/12/14/jianzhi-offer-01/"/>
      <url>/2019/12/14/jianzhi-offer-01/</url>
      
        <content type="html"><![CDATA[<h1 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h1><p>一只青蛙一次可以跳上1级台阶，也可以跳上2级。求该青蛙跳上一个n级的台阶总共有多少种跳法（先后次序不同算不同的结果）。</p><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>对于第n个台阶来说，只能从n-1或者n-2的台阶跳上来，所以<br><code>F(n) = F(n-1) + F(n-2)</code><br>斐波拉契数序列，初始条件<br>n=1:只能一种方法<br>n=2:两种<br>递归一下就好了</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">{</span>     <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>number <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>number<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">jumpFloor</span><span class="token punctuation">(</span>number<span class="token number">-2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
          <category> 剑指 offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 刷题 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
